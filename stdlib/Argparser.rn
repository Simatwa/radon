include Array

class Argparser {
    fun __constructor__(name, help) {
        # Program name
        this.name = name 
        
        # Program help text
        this.help = help
        
        # Command line arguments
        this.args = sys_args()

        # Added command lists
        this.commands = []
    }

    fun to_string() -> "<class 'Argparser'>"

    # This will return the main arguments which has been passed by the user
    fun get_args() -> arr_slice(this.args, 3, arr_len(this.args))
    
    fun add_command(name, help, nargs, action) {
        # param: name is like -n or --name line argument
        # param: help is for the help text to be printed
        # param: nargs is number of args to accept 0-?
        # param: action for a call back function which will take a single argument

        arr_append(this.commands, [name, help, nargs, action])
    }

    # Returns all selected commands
    fun get_commands() -> this.commands

    fun get_help() {
        # This will return the help text for -h or --help argument

        file_name = str(arr_find(args, 2))
        title = "usage: " + file_name + "\n\n" + name + "\n\n"
        options = "options: "

        return title + options
    }

    fun parse() {
        # Loop all the commands from module
        for i=0 to arr_len(this.get_commands()) {

            # Get the commands array
            cmd = arr_find(this.get_commands(), i)

            # Get the name of the command as an array
            final_arg = arr_slice(cmd, 0, 1)

            # Get the input command name as array
            g_arg = arr_slice(this.get_args(), 0, 1)
            
            if final_arg == g_arg {
                print("Got it")

                # action = arr_find(cmd, 3)
                # n = arr_find(cmd, 2)
                # print(n)
                # if n != 0 {
                #     for i=0 to int(n) {
                #         print(i)
                #     }
                # }
            }
        }
    }

}
